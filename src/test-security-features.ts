// Script de teste para demonstrar as funcionalidades de seguran√ßa implementadas

import { validateCPF, validateEmail, validatePhone, validateCurrency } from './lib/validation/validators';
import { sanitizeText, formatCPF, maskCardNumber } from './lib/validation/sanitizers';
import { encryptionService } from './lib/encryption/encryptionService';
import { dataProtectionService } from './lib/encryption/dataProtection';
import { auditLogger } from './lib/audit/auditLogger';

// Fun√ß√£o para testar valida√ß√µes
export function testValidations() {
  console.log('üîç Testando Sistema de Valida√ß√£o');
  console.log('================================');
  
  // Teste de CPF
  const cpfTest = validateCPF('111.444.777-35');
  console.log('CPF v√°lido:', cpfTest.isValid ? '‚úÖ' : '‚ùå', cpfTest.sanitizedValue);
  
  const cpfInvalido = validateCPF('123.456.789-00');
  console.log('CPF inv√°lido:', cpfInvalido.isValid ? '‚úÖ' : '‚ùå', cpfInvalido.errors[0]?.message);
  
  // Teste de email
  const emailTest = validateEmail('teste@exemplo.com');
  console.log('Email v√°lido:', emailTest.isValid ? '‚úÖ' : '‚ùå', emailTest.sanitizedValue);
  
  // Teste de telefone
  const phoneTest = validatePhone('(11) 99999-8888');
  console.log('Telefone v√°lido:', phoneTest.isValid ? '‚úÖ' : '‚ùå', phoneTest.sanitizedValue);
  
  // Teste de valor monet√°rio
  const currencyTest = validateCurrency('R$ 1.500,75');
  console.log('Valor monet√°rio:', currencyTest.isValid ? '‚úÖ' : '‚ùå', currencyTest.sanitizedValue);
  
  console.log('\n');
}

// Fun√ß√£o para testar sanitiza√ß√£o
export function testSanitization() {
  console.log('üßπ Testando Sistema de Sanitiza√ß√£o');
  console.log('==================================');
  
  // Teste de sanitiza√ß√£o XSS
  const maliciousInput = '<script>alert("XSS")</script>Texto limpo';
  const sanitized = sanitizeText(maliciousInput);
  console.log('Entrada maliciosa:', maliciousInput);
  console.log('Texto sanitizado:', sanitized);
  
  // Teste de formata√ß√£o
  const cpfFormatted = formatCPF('11144477735');
  console.log('CPF formatado:', cpfFormatted);
  
  // Teste de mascaramento
  const cardMasked = maskCardNumber('4532015112830366');
  console.log('Cart√£o mascarado:', cardMasked);
  
  console.log('\n');
}

// Fun√ß√£o para testar criptografia
export function testEncryption() {
  console.log('üîê Testando Sistema de Criptografia');
  console.log('===================================');
  
  const dadosSensiveis = 'Informa√ß√£o confidencial do cliente';
  
  // Criptografar
  const encrypted = encryptionService.encrypt(dadosSensiveis);
  console.log('Dados criptografados:', encrypted.encrypted.substring(0, 20) + '...');
  console.log('Algoritmo:', encrypted.algorithm);
  console.log('Vers√£o da chave:', encrypted.keyVersion);
  
  // Descriptografar
  const decrypted = encryptionService.decrypt(encrypted);
  console.log('Dados descriptografados:', decrypted);
  console.log('Dados √≠ntegros:', decrypted === dadosSensiveis ? '‚úÖ' : '‚ùå');
  
  console.log('\n');
}

// Fun√ß√£o para testar prote√ß√£o de dados
export function testDataProtection() {
  console.log('üõ°Ô∏è Testando Prote√ß√£o de Dados');
  console.log('=============================');
  
  const clienteData = {
    nome: 'Jo√£o Silva Santos',
    cpf: '11144477735',
    email: 'joao@exemplo.com',
    telefone: '11999887766'
  };
  
  const sensitiveFields = [
    { field: 'cpf', type: 'cpf' as const },
    { field: 'telefone', type: 'phone' as const }
  ];
  
  // Proteger dados
  const protectedData = dataProtectionService.protectSensitiveFields(clienteData, sensitiveFields);
  console.log('Dados originais:', clienteData);
  console.log('Dados protegidos:', {
    nome: protectedData.nome,
    cpf: protectedData.cpf?.masked,
    email: protectedData.email,
    telefone: protectedData.telefone?.masked
  });
  
  // Desproteger com permiss√£o
  const unprotectedWithPermission = dataProtectionService.unprotectSensitiveFields(
    protectedData, 
    ['cpf', 'telefone'], 
    true
  );
  console.log('Dados desprotegidos (com permiss√£o):', unprotectedWithPermission);
  
  // Desproteger sem permiss√£o
  const unprotectedWithoutPermission = dataProtectionService.unprotectSensitiveFields(
    protectedData, 
    ['cpf', 'telefone'], 
    false
  );
  console.log('Dados desprotegidos (sem permiss√£o):', unprotectedWithoutPermission);
  
  console.log('\n');
}

// Fun√ß√£o para testar auditoria
export async function testAuditLogging() {
  console.log('üìã Testando Sistema de Auditoria');
  console.log('================================');
  
  // Simular diferentes tipos de log
  await auditLogger.logCreate('cliente', 'test-123', 'Cliente de teste criado', { nome: 'Teste' });
  console.log('Log de cria√ß√£o registrado ‚úÖ');
  
  await auditLogger.logRead('cliente', 'test-123', 'Dados do cliente visualizados');
  console.log('Log de leitura registrado ‚úÖ');
  
  await auditLogger.logUpdate('cliente', 'test-123', 'Cliente atualizado', { nome: 'Teste' }, { nome: 'Teste Atualizado' });
  console.log('Log de atualiza√ß√£o registrado ‚úÖ');
  
  await auditLogger.logSuspiciousActivity('cliente', 'M√∫ltiplas tentativas de acesso em pouco tempo');
  console.log('Log de atividade suspeita registrado ‚úÖ');
  
  // For√ßar processamento do batch
  await auditLogger.flush();
  console.log('Batch de logs processado ‚úÖ');
  
  console.log('\n');
}

// Fun√ß√£o principal para executar todos os testes
export async function runSecurityTests() {
  console.log('üöÄ Iniciando Testes do Sistema de Seguran√ßa');
  console.log('===========================================\n');
  
  testValidations();
  testSanitization();
  testEncryption();
  testDataProtection();
  await testAuditLogging();
  
  console.log('‚úÖ Todos os testes de seguran√ßa conclu√≠dos!');
  console.log('O sistema est√° funcionando corretamente com:');
  console.log('- Valida√ß√£o robusta de dados');
  console.log('- Sanitiza√ß√£o contra XSS/SQL injection');
  console.log('- Criptografia AES-256 para dados sens√≠veis');
  console.log('- Mascaramento de dados para exibi√ß√£o');
  console.log('- Sistema completo de auditoria');
}

// Executar testes se este arquivo for importado no console do navegador
if (typeof window !== 'undefined') {
  (window as any).runSecurityTests = runSecurityTests;
  console.log('üí° Execute runSecurityTests() no console para testar o sistema de seguran√ßa');
}